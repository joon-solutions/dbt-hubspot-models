name: pr_to_main

on:
  pull_request:
    branches:
      - main
    paths:
      - 'models/**'
      - 'snapshots/**'
      - 'dbt_project.yml'
      - 'packages.yml'
      - 'requirement.txt'

env:
  ARTIFACT_DBT_MANIFEST_WORKFLOW: push_to_master.yml
  ARTIFACT_DBT_MANIFEST_NAME: dbt_manifest

  DBT_PROFILES_DIR: ./
  
  DBT_USER: ${{ secrets.DBT_USER }}
  DBT_PASSWORD: ${{ secrets.DBT_PASSWORD }}
  DBT_SCHEMA: ${{ secrets.DBT_SCHEMA }}

jobs:
  pr_to_main:
    name: pr_to_main
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@main

      - uses: actions/setup-python@v1
        with:
          python-version: "3.7.x"

      - uses: actions/setup-node@v3.4.1

      - name: Install dependencies
        run: |
          pip3 install -r requirements.txt
          dbt deps

      - name: Install lightdash CLI
        run: npm install -g @lightdash/cli

      - name: Seeding
        run: dbt seed

      - name: Check required tests
        run: |
          dbt run-operation required_tests

      - name: Lint with sqlfluff
        run: |
          git fetch origin main:main
          git diff main --name-only --diff-filter=d | egrep '^models/.*sql$$' | xargs -r sqlfluff lint
          
      ## In some case, manifest file artifact cannot be downloaded.
      # Then, compile current code to create a new manifest file.
      # Note, because previous dbt state is missing, all models will be
      # run and tested.
      - name: Create new Dbt manifest if cannot download
        if: steps.download_dbt_manifest.outcome == 'failure'
        run: |
          dbt compile
          cp target/manifest.json .

      ## Run delta models
      - name: Run models
        run: dbt run

      ## Test delta models
      - name: Test models
        run: dbt test --exclude tag:manual_input_test

      - name: Lightdash CLI start preview 
        env:
          LIGHTDASH_API_KEY: ${{ secrets.LIGHTDASH_API_KEY }}          
          LIGHTDASH_PROJECT: ${{ secrets.LIGHTDASH_PROJECT }}          
          LIGHTDASH_URL: ${{ secrets.LIGHTDASH_URL }}          

        run:  lightdash start-preview --project-dir . --profiles-dir . --name ${GITHUB_REF##*/}
